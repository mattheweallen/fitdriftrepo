<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:p="http://primefaces.org/ui">
<h:body>
	<ui:composition template="/template/layout.xhtml">
		<ui:define name="scripts">
			<title>Fitdrift Create Activity</title>
			<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyApDXRNzq6eGqWKUbufj3MzhJ4P0RF0Ghw&amp;sensor=false">
			</script>
		</ui:define>

		<ui:define name="menu">
			<h:form>
				<p:tabMenu activeIndex="2">
					<p:menuitem value="Dashboard" url="/faces/dashboard.xhtml" />
					<p:menuitem value="Upload Activity" url="/faces/upload.xhtml" />
					<p:menuitem value="Manual Activity"
						url="/faces/createactivity.xhtml" />
					<p:menuitem value="My Maps" url="/faces/mymaps.xhtml" />
					<p:menuitem value="Preferences" url="/faces/preferences.xhtml" />
					<p:menuitem value="Manage Items"
						url="/faces/admin/manageitems.xhtml"
						rendered="#{request.isUserInRole('ROLE_ADMIN')}" />
				</p:tabMenu>
			</h:form>
		</ui:define>

		<ui:define name="content">
			<p:growl id="growls" autoUpdate="true" globalOnly="false"
				sticky="true"></p:growl>

				<p:layout id="createLayout">
				<p:layoutUnit position="center"> 

					<h:form>
						<h:panelGrid columns="1" id="grid">
							<p:panelGrid columns="1" style="width:700px">
								<f:facet name="header">

									<p:commandButton value="Save" icon="ui-icon-check"
										action="#{createActivityBean.createActivity}"
										update=":#{p:component('grid')}" validateClient="true"
										style="margin:0" />

								</f:facet>

								<p:panelGrid style="width:675px" columns="2">

									<p:outputLabel for="popupCal" value="Date of Activity"></p:outputLabel>

									<p:calendar size="6" styleClass="dateTimeField"
										value="#{createActivityBean.activityDate}" id="popupCal"
										required="true"
										requiredMessage="Date of Activity is required." />

									<p:outputLabel for="actType" value="Activity"></p:outputLabel>

									<p:selectOneMenu
										converter="com.fitdrift.view.ActivityTypeConverter"
										value="#{createActivityBean.selectedActivityType}"
										id="actType">
										<p:ajax update=":#{p:component('grid')}" />
										<f:selectItem itemLabel="-Select Type-" itemValue="" />
										<f:selectItems var="actType" itemValue="#{actType}"
											itemLabel="#{actType.description}"
											value="#{createActivityBean.activityTypes}" />
										<!--  <f:selectItem itemLabel="Calisthenics" itemValue="1" />
                                                                        <f:selectItem itemLabel="Cycling" itemValue="2" />
                                                                        <f:selectItem itemLabel="Group Exercise" itemValue="3" />
                                                                        <f:selectItem itemLabel="Medidation/Prayer" itemValue="4" />
                                                                        <f:selectItem itemLabel="Running" itemValue="5" />
                                                                        <f:selectItem itemLabel="Ski" itemValue="6" />
                                                                        <f:selectItem itemLabel="Sleep" itemValue="7" />
                                                                        <f:selectItem itemLabel="Swimming" itemValue="8" />
                                                                        <f:selectItem itemLabel="Weight Training" itemValue="9" />-->
									</p:selectOneMenu>


									<p:outputLabel for="aSType" value="Sub Activity"></p:outputLabel>


									<p:selectOneMenu
										required="#{createActivityBean.selectedActivityType ne null and createActivityBean.selectedActivityType.description eq 'Measurement'}"
										requiredMessage="Subtype is required."
										converter="com.fitdrift.view.ActivitySubTypeConverter"
										value="#{createActivityBean.selectedActivitySubType}"
										id="aSType">
										<p:ajax update=":#{p:component('grid')}" />
										<f:selectItem itemLabel="-Select Sub Type-" itemValue="" />
										<f:selectItems value="#{createActivityBean.activitySubTypes}"
											var="aSubType" itemLabel="#{aSubType.description}"
											itemValue="#{aSubType}" />
										<!--  <f:selectItem itemLabel="Cycling Cyclocross" itemValue="1" />
                                                                        <f:selectItem itemLabel="Cycling Indoors" itemValue="2" />
                                                                        <f:selectItem itemLabel="Cycling Mountain" itemValue="3" />
                                                                        <f:selectItem itemLabel="Cycling Road" itemValue="4" />
                                                                        <f:selectItem itemLabel="Cycling Track" itemValue="5" />
                                                                        <f:selectItem itemLabel="Running Outside" itemValue="6" />
                                                                        <f:selectItem itemLabel="Running Treadmill" itemValue="7" />
                                                                        <f:selectItem itemLabel="Swimming" itemValue="3" />
                                                                        <f:selectItem itemLabel="Calisthenics" itemValue="3" />
                                                                        <f:selectItem itemLabel="Ski Alpine" itemValue="4" />
                                                                        <f:selectItem itemLabel="Ski Nordic" itemValue="5" />
                                                                        <f:selectItem itemLabel="Ski Roller" itemValue="5" />
                                                                        <f:selectItem itemLabel="Ski Telemark" itemValue="6" />
                                                                        <f:selectItem itemLabel="Medidation/Prayer" itemValue="7" />
                                                                        <f:selectItem itemLabel="Sleep" itemValue="8" />-->
									</p:selectOneMenu>
								</p:panelGrid>

								<p:panelGrid columns="1"
									rendered="#{createActivityBean.selectedActivityType ne null and createActivityBean.selectedActivityType.description ne 'Measurement'}">
									<p:panelGrid columns="2">

										<p:outputLabel for="inputActivityName" value="Activity Name"></p:outputLabel>
										<p:inputText id="inputActivityName"
											value="#{createActivityBean.activityName}"
											style="width : 400px" size="40"
											placeholder="#{createActivityBean.defaultActivityName}"></p:inputText>


										<p:outputLabel for="startTime" value="Start Time (HH:MM:SS)"></p:outputLabel>
										<p:inputMask style="width : 80px" id="startTime"
											mask="99:99:99" required="true"
											value="#{createActivityBean.startTime}"
											requiredMessage="Start Time is required."
											validatorMessage="Start Time must be time in 24 hour clock HH:MM:SS, 23:45:56 for example.">
											<f:validator validatorId="militaryTimeValidator" />
										</p:inputMask>

										<p:outputLabel for="endTime" value="End Time (HH:MM:SS)"></p:outputLabel>
										<p:inputMask style="width : 80px" id="endTime" mask="99:99:99"
											required="true" value="#{createActivityBean.endTime}"
											requiredMessage="End Time is required."
											validatorMessage="End Time must be time in 24 hour clock HH:MM:SS, 23:45:56 for example.">
											<f:validator validatorId="militaryTimeValidator" />
										</p:inputMask>




										<h:panelGrid columns="2" style="margin-bottom:10px;"
											cellpadding="5">
											<p:selectBooleanCheckbox id="indoors"
												value="#{createActivityBean.indoors}" />
											<h:outputText value="Indoors " />

										</h:panelGrid>
										<p:panelGrid columns="2">
											<p:selectOneMenu value="#{createActivityBean.activityGear}"
												id="selectGear">
												<f:selectItem itemLabel="-Select Gear-" itemValue="" />
												<f:selectItem itemLabel="Cycling" itemValue="1" />
												<f:selectItem itemLabel="Running" itemValue="2" />
												<f:selectItem itemLabel="Swimming" itemValue="3" />
											</p:selectOneMenu>
											<p:commandButton value="Add Gear"></p:commandButton>
										</p:panelGrid>



										<h:panelGrid columns="2" style="margin-bottom:10px;"
											cellpadding="5">
											<p:selectBooleanCheckbox id="useMyMap"
												onchange="handleOnChange(this)"
												value="#{createActivityBean.useMyMap}"
												widgetVar="useMyMapCheck">
												<p:ajax update="myMapInput distance"
													listener="#{createActivityBean.useMyMapChecked}" />
											</p:selectBooleanCheckbox>
											<h:outputText value="Use My Map " />

										</h:panelGrid>

									
											<p:inputText id="myMapInput" style="width : 400px" size="40" 
												value="#{createActivityBean.mapMapName}"
												onfocus="PF('dlg').show();" 
												disabled="#{!createActivityBean.useMyMap}">
	
											</p:inputText>
											
										

										<p:outputLabel for="distance" value="Distance"></p:outputLabel>
										<p:inputText id="distance"
											value="#{createActivityBean.distance}" style="width : 70px"
											disabled="#{createActivityBean.useMyMap}"
											validatorMessage="Distance must be number between 0 and 1000.">
											<f:validateDoubleRange minimum="0" maximum="1000" />
											<f:convertNumber maxFractionDigits="2"></f:convertNumber>
										</p:inputText>
										<p:outputLabel for="calories" value="Calories"></p:outputLabel>
										<p:inputText id="calories"
											value="#{createActivityBean.calories}" style="width : 70px"
											validatorMessage="Calories must be number between 0 and 20000.">
											<f:validateDoubleRange minimum="0" maximum="20000" />
										</p:inputText>
										<p:outputLabel for="aveHeartRate" value="Average Heart Rate"></p:outputLabel>
										<p:inputText id="aveHeartRate" style="width : 70px"
											value="#{createActivityBean.aveHeartRate}"
											validatorMessage="Average Heart Rate must be number between 0 and 300.">
											<f:validateDoubleRange minimum="0" maximum="300" />
										</p:inputText>
									</p:panelGrid>
								</p:panelGrid>

								<p:panelGrid columns="2"
									rendered="#{createActivityBean.selectedActivityType ne null and createActivityBean.selectedActivityType.description eq 'Measurement' and createActivityBean.selectedActivitySubType.description eq 'Weight'}">
									<p:outputLabel for="weight" value="Weight"></p:outputLabel>
									<p:inputText id="weight" value="#{createActivityBean.weight}"
										required="true" requiredMessage="Weight is required."
										validatorMessage="Weight must be number between 0 and 1000.">
										<f:validateDoubleRange minimum="0" maximum="1000" />
									</p:inputText>
								</p:panelGrid>




								<p:panelGrid columns="2"
									rendered="#{createActivityBean.selectedActivitySubType.description eq 'Systolic'}">



									<p:outputLabel for="systolic" value="SYS mmHg"></p:outputLabel>
									<p:inputText id="systolic" required="true"
										requiredMessage="Systolic is required."
										value="#{createActivityBean.systolic}"
										validatorMessage="Systolic must be number between 0 and 1000.">
										<f:validateDoubleRange minimum="0" maximum="1000" />
									</p:inputText>
								</p:panelGrid>

								<p:panelGrid columns="2"
									rendered="#{createActivityBean.selectedActivitySubType.description eq 'Diastolic'}">



									<p:outputLabel for="diastolic" value="DIA mmHg"></p:outputLabel>
									<p:inputText id="diastolic" required="true"
										requiredMessage="Diastolic is required."
										value="#{createActivityBean.diastolic}"
										validatorMessage="Diastolic must be number between 0 and 1000.">
										<f:validateDoubleRange minimum="0" maximum="1000" />
									</p:inputText>
								</p:panelGrid>


								<p:panelGrid columns="2"
									rendered="#{createActivityBean.selectedActivitySubType.description eq 'Height'}">
									<p:outputLabel for="height" value="Height"></p:outputLabel>
									<p:inputText id="height" value="#{createActivityBean.height}"
										required="true" requiredMessage="Height is required."
										validatorMessage="Height must be number between 0 and 1000.">
										<f:validateDoubleRange minimum="0" maximum="1000" />
									</p:inputText>
								</p:panelGrid>
								<p:panelGrid columns="2"
									rendered="#{createActivityBean.selectedActivitySubType.description eq 'Pulse'}">
									<p:outputLabel for="pulse" value="Pulse/min"></p:outputLabel>
									<p:inputText id="pulse" value="#{createActivityBean.pulse}"
										required="true" requiredMessage="Pulse is required."
										validatorMessage="Pulse must be number between 0 and 1000.">
										<f:validateDoubleRange minimum="0" maximum="1000" />
									</p:inputText>
								</p:panelGrid>

								<p:panelGrid columns="2"
									rendered="#{createActivityBean.selectedActivitySubType.description eq 'Waist'}">
									<p:outputLabel for="waist" value="Waist"></p:outputLabel>
									<p:inputText id="waist" value="#{createActivityBean.waist}"
										required="true" requiredMessage="Waist is required."
										validatorMessage="Waist must be number between 0 and 1000.">
										<f:validateDoubleRange minimum="0" maximum="1000" />
									</p:inputText>
								</p:panelGrid>
								<p:panelGrid columns="2"
									rendered="#{createActivityBean.selectedActivitySubType.description eq 'Hip'}">
									<p:outputLabel for="hip" value="Hip"></p:outputLabel>
									<p:inputText id="hip" value="#{createActivityBean.hip}"
										required="true" requiredMessage="Hip is required."
										validatorMessage="Hip must be number between 0 and 1000.">
										<f:validateDoubleRange minimum="0" maximum="1000" />
									</p:inputText>
								</p:panelGrid>
								<p:panelGrid columns="2"
									rendered="#{createActivityBean.selectedActivitySubType.description eq 'Thigh'}">
									<p:outputLabel for="thigh" value="Thigh"></p:outputLabel>
									<p:inputText id="thigh" value="#{createActivityBean.thigh}"
										required="true" requiredMessage="Hip is required."
										validatorMessage="Thigh must be number between 0 and 1000.">
										<f:validateDoubleRange minimum="0" maximum="1000" />
									</p:inputText>
								</p:panelGrid>


							</p:panelGrid>
						</h:panelGrid>
					</h:form>
					</p:layoutUnit>
				<p:layoutUnit position="east" minSize="600"> <!--   rendered="#{!activityBean.emptyMap}">  -->
					<div id="map_canvas"  
						style="width:100%;height:400px"  >
					
					</div>	
					
				</p:layoutUnit>
			</p:layout>
			<!-- Dialog -->
			
			 
			
			
			<p:dialog widgetVar="dlg" showEffect="fade" appendTo="@(body)"
				dynamic="true" modal="true">
				<h:form prependId="false">
					<p:dataTable id="myMapTable" value="#{myMapBean.lazyModel}"
						var="myMap" rows="10" paginator="true" lazy="true">




						<p:column rendered="#{request.isUserInRole('ROLE_ADMIN')}">
							<f:facet name="header">User Name</f:facet>
							<h:outputText value="#{myMap.user.username}" />

						</p:column>

						<p:column>
							<f:facet name="header">Name</f:facet>
							<p:commandLink value="#{myMap.name}"
								update=":#{p:component('myMapInput')} :#{p:component('distance')} :#{p:component('coordinates')}"
								action="#{createActivityBean.addMyMap}" oncomplete="handleMapSelected();">
								<f:setPropertyActionListener value="#{myMap}"
									target="#{createActivityBean.selectedMap}" />
							</p:commandLink>

						</p:column>

						<p:column>
							<f:facet name="header">Date</f:facet>
							<h:outputText value="#{myMap.date}" />

						</p:column>

							


					</p:dataTable>
					
				</h:form>
			</p:dialog>
			<h:inputHidden id="coordinates" value="#{createActivityBean.coordinates}"></h:inputHidden>

			<!-- End Dialog -->

			<script type="text/javascript">
				//var gmap; //= PF('map').getMap();
				var map;
				var activity;
				function handleOnChange(target) {

					if (target.checked) {
						PF('dlg').show();
					} else {
						activity.setMap(null);
						//gmap = null;
					}
				}
				
				
				function handleMapSelected() {
					//document.getElementById('coordinates').value
					//document.getElementById('coordinates').value
					
					//var center = new google.maps.LatLng(document.getElementById('coordinates').value, document.getElementById('coordinates').value);
					//var center = document.getElementById('coordinates').value;
					//alert(document.getElementById('coordinates').value);
					//map.setCenter(document.getElementById('coordinates').value);
					
					
					
					//from servlet
					//test
                                      var activityCoordinates = new Array();
                                
                                var coordinates = eval(document.getElementById('coordinates').value);
                                //console.log(coordinates);
                                var latlngbounds = new google.maps.LatLngBounds();
                                for(var i = 0; i &lt; coordinates.length; i+=1) {
                                        var row = coordinates[i];
                                        //console.log(row);   
                                                                    var longitude = row.lng;
                                                                           //console.log(row.lat);
                                                                           var latitude = row.lat;
                                                                           //console.log(row.lng);
                                                                        activityCoordinates[i] = new google.maps.LatLng(latitude,longitude);
                                                                        //console.log(activityCoordinates[i]);
                                                                        latlngbounds.extend(activityCoordinates[i]);
                                }
                                //console.log(activityCoordinates);
                                
                                //test
                                 /* var mapOptions = {
                                    zoom: 12,
                                    center: {activityBean.center},
                                    mapTypeId: google.maps.MapTypeId.TERRAIN
                                  };
                                
                                  var map = new google.maps.Map(document.getElementById('map-canvas'),
                                      mapOptions);*/
                                
                                  //map.setCenter(new google.maps.LatLng(43.8, -91.2));
                                  activity = new google.maps.Polyline({
                                    path: activityCoordinates,
                                    geodesic: true,
                                    strokeColor: '#FF0000',
                                    strokeOpacity: 1.0,
                                    strokeWeight: 2
                                  });
                                  activity.setMap(map);
                                  map.fitBounds(latlngbounds);
					//end from servlet
					
					
					
					/*var mapOptions = {
                            zoom: 12,
                            center: center,
                            mapTypeId: google.maps.MapTypeId.TERRAIN
                          };
                        
                          map.setOptions(mapOptions);*/
                        
                         /* var activityCoordinates = [{activityBean.coordinates}];
                          var activity = new google.maps.Polyline({
                            path: activityCoordinates,
                            geodesic: true,
                            strokeColor: '#FF0000',
                            strokeOpacity: 1.0,
                            strokeWeight: 2
                          });
                          activity.setMap(map);*/
					
					
					
					//coordinates
					
					PF('dlg').hide();
				}
				

				function initialize() {
					////
					
					var mapOptions = {
    zoom: 8,
    center: new google.maps.LatLng(43.2, -91)
  };

  map = new google.maps.Map(document.getElementById('map_canvas'),
      mapOptions);
					
					
					
				/*	var flightPlanCoordinates = [
					                             new google.maps.LatLng(37.772323, -122.214897),
					                             new google.maps.LatLng(21.291982, -157.821856),
					                             new google.maps.LatLng(-18.142599, 178.431),
					                             new google.maps.LatLng(-27.46758, 153.027892)
					                           ];
					                           var flightPath = new google.maps.Polyline({
					                             path: flightPlanCoordinates,
					                             geodesic: true,
					                             strokeColor: '#FF0000',
					                             strokeOpacity: 1.0,
					                             strokeWeight: 2
					                           });*/

					                           //flightPath.setMap(PF('map').getMap());
                     // PF('map').addOverlay(flightPath);
					

					var styles = [ {
						featureType : "poi",
						stylers : [ {
							visibility : "off"
						} ]
					} ]

					map.setOptions({
						styles : styles
					});
					/////
					/*google.maps.event.trigger(gmap, 'resize');*/
					
					//PF('dlg').hide();

					/*gmap.controls[google.maps.ControlPosition.TOP_CENTER]
							.push(document.getElementById('panel'));
					document.getElementById('distance').value = 0 + ' Miles';*/
				}

				google.maps.event.addDomListener(window, 'load', initialize);
			</script>
		</ui:define>
	</ui:composition>

</h:body>
</html>